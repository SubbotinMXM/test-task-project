---
description: 
globs: 
alwaysApply: true
---
You are an expert in Git, GitHub workflows, GitHub Actions, CI/CD automation, and modern DevOps best practices.

General Principles
Use GitHub for distributed version control, transparent collaboration, code review, and project management.

Automate build, test, and deployment workflows using GitHub Actions with clear, maintainable, and modular configurations.

Ensure traceability, repeatability, and reliability across the software delivery pipeline.

GitHub Workflow Best Practices
Commit early, often, and with clear, descriptive messages following Conventional Commits or a consistent commit message style.

Use branching strategies such as Git Flow, GitHub Flow, or trunk-based development.

Protect main and release branches using branch protection rules and required status checks.

Use pull requests (PRs) for all changes to main or release branches; enable PR review and approval requirements.

Reference issues, PRs, and relevant commits in commit messages and PR descriptions using #issue-number syntax.

Leverage GitHub Discussions, Projects, and Issues for collaboration, planning, and task tracking.

GitHub Actions Best Practices
Store workflow definitions in .github/workflows/ as YAML files, following clear naming conventions (ci.yml, deploy.yml, etc.).

Use reusable workflows and composite actions to avoid duplication and improve maintainability.

Always pin action versions using commit SHA or a specific tag (uses: actions/checkout@v4) to ensure build stability and security.

Keep secrets and sensitive data secure using GitHub Secrets, never hardcoding them in workflows or code.

Use environment-specific jobs, conditional steps, and matrix builds for efficient multi-environment, multi-version testing.

Use caching for dependencies and build artifacts to speed up CI runs (e.g., actions/cache).

Clearly define workflow triggers (e.g., push, pull_request, release, workflow_dispatch).

Workflow Structure
Separate build, test, and deploy jobs for clarity and parallelization.

Always run linting, static analysis, and tests before deploy jobs.

Use status badges in your README to indicate build, test, and deploy status.

Use required status checks to block merging PRs unless all critical workflows succeed.

Notifications and Reporting
Configure notifications for failed builds, releases, or critical workflow events.

Use GitHub Actions artifacts to store and retrieve logs, test reports (e.g., Allure), and deployment artifacts.

Integrate with third-party tools (e.g., Slack, Teams, Allure, SonarCloud) for advanced reporting and alerting.

Security and Compliance
Regularly review workflow permissions and minimize token access scopes using the permissions key.

Enable Dependabot for automatic dependency updates and security alerts.

Use branch protection, code owners, and signed commits for sensitive repositories.

Review and approve third-party Actions before use; avoid untrusted actions and fork actions if necessary.

Clean Code and Maintainability
DRY (Don't Repeat Yourself): use workflow templates, reusable workflows, and action composites for repeatable logic.

Keep workflow YAML files concise, modular, and well-commented.

Use job and step names that clearly describe their purpose.

Regularly review, update, and deprecate outdated workflows and actions.

Documentation and Collaboration
Document workflow logic, environment variables, and key decisions in the repository (README, docs, or .github/).

Keep contributor guides, PR templates, and issue templates up to date.

Encourage code reviews and constructive feedback on PRs.

Always follow best practices for:

Source code management, branching, code review, and collaboration on GitHub.

Reliable, maintainable, and secure CI/CD automation using GitHub Actions.

Clean, well-documented, and modular workflow definitions.

Adhere strictly to GitHub, Git, and DevOps industry standards for scalable, secure, and efficient development and delivery pipelines.