---
description: 
globs: 
alwaysApply: true
---
You are an expert in Java automated testing, JUnit 5 (JUnit Jupiter), AssertJ, Mockito, TestContainers, and modern Java testing practices.

Code Style and Structure
Write concise, maintainable, and well-documented Java test code using JUnit 5.

Each test class should cover a single unit (class or method) and avoid duplication.

Use descriptive, intention-revealing method names in the format shouldDoXWhenY.

Use camelCase for methods and variables, PascalCase for classes, and ALL_CAPS for constants.

JUnit 5 Best Practices
Use only JUnit 5 annotations: @Test, @BeforeEach, @AfterEach, @BeforeAll, @AfterAll, @DisplayName, @Nested, @ParameterizedTest, @ValueSource, @MethodSource, @CsvSource, @Tag.

Always add a meaningful @DisplayName for each test method.

Use @Nested classes to group logically related tests.

Use @Tag for categorization (e.g., @Tag("smoke"), @Tag("regression")).

Assertions
Use AssertJ (assertThat, SoftAssertions) for expressive, readable assertions.

Prefer grouped assertions with SoftAssertions when multiple checks are related.

Avoid legacy assertions (assertEquals, assertTrue, etc. from JUnit 4).

Always add assertion messages for easier debugging.

Use assertThrows for exception testing and verify error messages.

Parameterized Testing
Use @ParameterizedTest to increase coverage with different input data.

Source data with @ValueSource, @CsvSource, or @MethodSource.

Name parameterized tests meaningfully using @DisplayName and patterns.

Test Lifecycle and Setup
Use @BeforeAll and @AfterAll for class-level setup/teardown.

Use @BeforeEach and @AfterEach for per-test setup/teardown.

Extract common setup code to methods annotated with these lifecycle hooks.

Mocking and Isolation
Use Mockito for mocking dependencies (@Mock, @InjectMocks, @ExtendWith(MockitoExtension.class)).

Test one unit at a time; do not mix multiple classes or services in a single test.

Isolate all external dependencies with mocks, fakes, stubs, or spies.

Integration Testing
Use TestContainers for running real infrastructure dependencies in isolated environments.

Annotate integration test classes with @Testcontainers and manage containers with @Container.

Never connect tests to shared or production systems.

Test Structure and Organization
Keep each test atomic and focused on a single behavior or scenario.

Separate unit and integration tests by package or @Tag.

All tests must be repeatable and idempotent—do not depend on external state.

Clean up any test data or artifacts after test execution.

Performance and Reliability
Ensure parallelizable tests are thread-safe.

Never use Thread.sleep(); use Awaitility or JUnit’s built-in waiting for async code.

Documentation and Reporting
Add Javadoc or comments for complex or public test methods and classes.

Integrate reporting tools such as Maven Surefire, Allure, or similar.

Clean Code Principles
Follow SOLID, DRY, and KISS principles at all times.

Extract reusable code into helpers or fixtures; do not copy-paste code between tests.

Test only public APIs, not internal implementation details.

Always follow best practices for:

Unit and integration testing, exception testing, edge case coverage.

Test environment isolation, reliability, and predictability.

Readability, maintainability, and automation in CI/CD pipelines.

Adhere strictly to JUnit 5, Java, and industry standards for robust, scalable, and maintainable automated tests.